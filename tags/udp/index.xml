<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UDP on Clarity</title><link>https://ryji.github.io/tags/udp/</link><description>Recent content in UDP on Clarity</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Fri, 12 Feb 2021 12:15:10 +0800</lastBuildDate><atom:link href="https://ryji.github.io/tags/udp/index.xml" rel="self" type="application/rss+xml"/><item><title>High-Performance Browser Networking 读书笔记-UDP</title><link>https://ryji.github.io/post/hnbp/hpbn-udp/</link><pubDate>Fri, 12 Feb 2021 12:15:10 +0800</pubDate><guid>https://ryji.github.io/post/hnbp/hpbn-udp/</guid><description>
引言 UDP(User Datagram Protocol)协议，不同于TCP，是一种无连接的不可靠协议。在IP层的基础上，UDP协议增加了四个字段，且其中的port为可选的，checkSum也可以被业务层忽略。因此，UDP协议具有以下特点：
不保证消息送达（没有ACK，重传，timeout） 不保证消息顺序（没有packet编码，没有HOL问题） 无连接（没有连接建立/断开的状态） 无拥塞控制 另外，TCP为面向流的协议，因此，一条消息可能会被分片传输；而UDP协议不会有此情况，一条消息对应一个IP包，不会有分片的问题。
UDP与NAT 为了解决IPV4地址不足的问题，在1994年，人们提出使用NAT(Network Address Translator)设备将内网地址映射到外网地址，这样不同的子网就可以共享内网地址，来解决IPV4地址耗尽的问题。虽然这只是临时的解决方案，但如今NAT已经成为互联网网络基础设施的一部分。
NAT设备维护内部IP、端口与外部IP、端口的映射。TCP协议有明确的连接建立/断开流程，NAT设备可以利用在连接断开时，删除建立的映射关系；然而，UDP协议是无连接的，NAT设备必须维护映射表，处于内网的设备才能接受外部发过来的UDP消息。另外，NAT设备的映射表在没有流量经过一段时间后，会将映射关系置为timeout状态来删除这条映射关系记录。对于UDP应用来说，可以使用双向的keepAlive包来维持NAT设备的映射关系。 另外，虽然理论上NAT设备可以使用TCP连接的状态转移来维护映射关系，但实际上，大多数NAT设备都采用会话超时策略处理UDP和TCP连接。因此，当TCP连接失效时，可能是NAT设备的原因。
STUN, TURN and ICE UDP连接建立时，如果客户端设备隐藏在NAT设备之后，那么必须知道该设备的公网地址才能建立建立，而且，在NAT设备中，必须维护有此公网地址和设备内网地址的映射关系，进入此子网的流量才能经过NAT设备进入目标设备。STUN，TURN和ICE提供了建立端到端UDP连接的方法。
STUN STUN(Session Traversal Utilities for NAT)可以确认应用部署的环境是否存在NAT设备，如果存在NAT设备，则可以获取此连接的外网地址。STUN协议需要使用部署在外网环境的STUN服务器才能完成上述功能。
应用发出一条binding请求到STUN服务器，服务器返回应用的公网IP和端口 应用利用映射的公网IP和端口进行UDP通信 binding请求在请求的路由路径中建立了内外网地址映射关系，使用公网地址的入站流量可以正确地路由到内网地址 STUN协议也定义了一种keepalive的机制，用来维持NAT映射关系防止因超时导致的自动清理 TURN 在部分网络环境下，可能无法通过STUN建立UDP端到端连接。例如，部分企业级网络的防火墙可能禁用UDP协议。在此情况下，可以转用TURN(Traversal Using Relays around NAT)协议。顾名思义，TURN协议依赖公网上的转发来交换peer之间的数据
通信双方都发送allocate请求到同一个TURN服务器，进行通信协商 当协商完成后，通信双方发送数据到TURN服务器，服务器进行数据转发 google libjingle提供了STUN，TURN，ICE协商的能力，而且被使用在google talk等产品中。根据其文档，92%的P2P连接可以直接使用STUN建立，剩余的使用TURN建立
ICE ICE( Interactive Connectivity Establishment)提供了建立高效的P2P通信的方法。优先直接连接，其次考虑使用STUN，在其他方式建立失败后，使用TURN
Checklist 必须适应多种网络环境 应当控制数据传输速率 应当进行拥塞控制 应当与采用与TCP类似的方式使用带宽 应当能够在丢失数据后进行重传 不应当发送大于MTU的数据包 应当处理数据包丢失、重复、乱序 应当能够在2min的延时下保持鲁棒性 应当支持IPV4 UDPcheckSum特性，必须支持IPV6 checkSum 在需要时，可以发送keepalive包(最小间隔不高于15s)</description></item></channel></rss>