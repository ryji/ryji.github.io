<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>消息队列 on Clarity</title><link>https://example.com/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><description>Recent content in 消息队列 on Clarity</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Mon, 15 Mar 2021 22:37:05 +0800</lastBuildDate><atom:link href="https://example.com/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml"/><item><title>Kafka basic intro</title><link>https://example.com/post/kafka/kafka_basic_intro/</link><pubDate>Mon, 15 Mar 2021 22:37:05 +0800</pubDate><guid>https://example.com/post/kafka/kafka_basic_intro/</guid><description>
Apache Kafka 是一种 publish/subscibe 类型的消息系统，常用作系统间异步通信的中间件，降低系统的耦合。其突出优点为：支持多生产/消费者、基于磁盘的消息存储、水平扩展性、高性能。
message &amp;amp; batch kafka 中的基本数据单元是消息(message)，其概念类似于数据库中的行。为了提高读写效率，消息是以批(batch)的形式写入 kafka 中，一个 batch 是一组消息的集合。通过这种方法，降低传输消息的网络损耗；另外，batch 一般经过压缩，进一步提高了数据传输效率。batch 的大小和消息传输的时延(latency)正相关。
在 kafka 中，虽然消息只是一组byte，但通常推荐将消息组织成某种可序列化/反序列化的格式。常用的格式有 JSON, XML 和 Avro 。
topic 在 kafka 中，消息使用主题(Topic)分类，其概念类似于数据库中的表。不同类型的消息使用不同的 topic，应用系统只需发布/订阅自身业务相关的 topic 消息。每一个 Topic 又有多个分区(partition)。在一个 kafka 集群中，不同的分区可以分布在不同的节点上，提高消息系统的水平扩展能力；同一个分区可以在多个节点上冗余，提高消息系统的容灾和可用性。
producer &amp;amp; consumer Producer(生产者)是 kafka 中产出消息的单元。在默认情况下，生产者不关心消息发送到哪个分区，系统会自动进行消息的负载均衡。
Consumer(消费者)是订阅并消费消息的单元；一组订阅同一个 topic 的 consumer 构成了一个 consumer group。在一个 consumer group 中， 同一个 partition 的消息最多只能被一个 consumer 消费，即对任一一个topic：consumer 的数量 &amp;lt;= partition 数量。某些极其热门的消息应分配更多的分区，防止 partition 的数量造成整个系统的性能瓶颈。
kafka 中，每条消息都会有其对应在当前 partition 中的 offset，消费者通过消息的在该 partition 的偏移量(offset)来进行消费。实际中，可以在 ZooKeeper 或者 kafka 中记录当前topic - partition 被当前的 consumer group 消费的 offset，可以保障 consumer 重启后也不会丢失其处理消息的位置。</description></item></channel></rss>