<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data System on ryji's personal blog</title><link>http://ryji.github.io/categories/data-system/</link><description>Recent content in Data System on ryji's personal blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 05 Mar 2019 05:43:58 +0800</lastBuildDate><atom:link href="http://ryji.github.io/categories/data-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Template in C#</title><link>http://ryji.github.io/post/ddia_chap1/</link><pubDate>Tue, 05 Mar 2019 05:43:58 +0800</pubDate><guid>http://ryji.github.io/post/ddia_chap1/</guid><description>chapter1 Reliability continue to work correctly, even when things go wrong
typical expections:
perform as the user expected tolerate user mistakes performance is good enough under expected load and data volumn pervents unauthorized access and abuse fault: one component of the system deviating from its spec failure: the system as a whole stops providing the required service
hardware faults redundancy: disk(RAID), hot-swappable CPU, UPS fault-tolerance techniques software errors carefully think about assumptions and interactions process isolation, allow process to crash and restart mesure, monitor, anzlyze system behavior human errors minimize opportunity for human error decouple the places where people make the most mistakes from the places where they can cause failures(sandbox) test thoroughly at all levels allow quick and easy recovery from human errors</description></item></channel></rss>