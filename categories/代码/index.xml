<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>代码 on Clarity</title><link>https://ryji.github.io/categories/%E4%BB%A3%E7%A0%81/</link><description>Recent content in 代码 on Clarity</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 25 Jun 2020 15:20:33 +0800</lastBuildDate><atom:link href="https://ryji.github.io/categories/%E4%BB%A3%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>C# version golang singleflight</title><link>https://ryji.github.io/post/csharp/csharp_singleflight/</link><pubDate>Thu, 25 Jun 2020 15:20:33 +0800</pubDate><guid>https://ryji.github.io/post/csharp/csharp_singleflight/</guid><description>
引言 GroupCache 是 go 语言的一个开源项目，其目标提供去中心节点的 P2P 分布式缓存代替 memcached。其中使用到的技术有：LRU cache，一致性哈希，并发请求压缩等。该项目已在 Google 的多个服务中使用。
本文使用 C# 实现 GroupCache 中用到并发请求压缩技术，并使用单元测试验证其功能。
实现 实现要点 需要记录所有执行中的请求，才能在新的请求进来时进行请求压缩，使用字典_onFlight记录；字典_onFlight存在多线程读写问题，需要使用锁来保护； 需要记录请求产生的结果和异常，才能在被阻塞的线程恢复后，将其他线程产生的结果返回到调用方。因此，在OnFlightCallRes添加Res和Exception字段 为了实现请求压缩，需要阻塞/恢复请求，且阻塞/恢复的单位是每一个同key的请求。使用ManualResetEventSlim进行线程的阻塞/恢复。因为阻塞/恢复的单元和执行结果都以key作为主键，将此变量放入OnFlightCallRes中 代码 1public class SingleFlight 2{ 3/// &amp;lt;summary&amp;gt; 4/// Keep Key After Execute Call 5/// &amp;lt;/summary&amp;gt; 6private readonly bool _keepKey; 78/// &amp;lt;summary&amp;gt; 9/// dic to store call result 10/// &amp;lt;/summary&amp;gt; 11private readonly Dictionary&amp;lt;string, OnFlightCallRes&amp;gt; _onFlight; 1213/// &amp;lt;summary&amp;gt; 14/// lock 15/// &amp;lt;/summary&amp;gt; 16private readonly ReaderWriterLockSlim _lockSlim; 1718public SingleFlight(bool keepKey) 19{ 20_keepKey = keepKey; 21_onFlight = new Dictionary&amp;lt;string, OnFlightCallRes&amp;gt;(); 22_lockSlim = new ReaderWriterLockSlim(); 23} 2425/// &amp;lt;summary&amp;gt; 26/// Return &amp;lt;paramref name=&amp;#34;callFunc&amp;#34;/&amp;gt; Result 27/// calls from different thread with the same &amp;lt;paramref name=&amp;#34;key&amp;#34;/&amp;gt; will be compressed to one call 28/// &amp;lt;/summary&amp;gt; 29/// &amp;lt;typeparam name=&amp;#34;T&amp;#34;&amp;gt;&amp;lt;/typeparam&amp;gt; 30/// &amp;lt;param name=&amp;#34;key&amp;#34;&amp;gt;&amp;lt;/param&amp;gt; 31/// &amp;lt;param name=&amp;#34;callFunc&amp;#34;&amp;gt;&amp;lt;/param&amp;gt; 32/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; 33public T Call&amp;lt;T&amp;gt;(string key, Func&amp;lt;T&amp;gt; callFunc) 34{ 35_lockSlim.</description></item></channel></rss>